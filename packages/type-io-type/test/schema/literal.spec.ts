import { expect } from 'chai'
import { literal } from '../../src'
import { createSuite } from '../util/createSuite'

describe('Schema: LiteralSchema', () => {
  it('Name compare', () => {
    const stringLiteral = literal('literal')
    const numberLiteral = literal(0)
    const booleanLiteral = literal(true)

    expect(stringLiteral.name).to.be.not.equal(numberLiteral.name)
    expect(stringLiteral.name).to.be.not.equal(booleanLiteral.name)
    expect(numberLiteral.name).to.be.not.equal(booleanLiteral.name)
  })

  describe('Type check (string)', () => {
    const schema = literal('literal')
    const suite = createSuite((v) => schema.is(v))
    suite.array.string.isFalse()
    suite.boolean.isFalse()
    suite.date.isFalse()
    suite.literal.boolean.isFalse()
    suite.literal.number.isFalse()
    suite.literal.string.isTrue()
    suite.null.isFalse()
    suite.number.isFalse()
    suite.object.simple.isFalse()
    suite.object.nested.isFalse()
    suite.string.isFalse()
    suite.tuple.isFalse()
    suite.type.isFalse()
    suite.undefined.isFalse()
  })
  describe('Type check (number)', () => {
    const schema = literal(0)
    const suite = createSuite((v) => schema.is(v))
    suite.array.string.isFalse()
    suite.boolean.isFalse()
    suite.date.isFalse()
    suite.literal.boolean.isFalse()
    suite.literal.number.isTrue()
    suite.literal.string.isFalse()
    suite.null.isFalse()
    suite.number.each((c) => (c.value === 0 ? c.isTrue() : c.isFalse()))
    suite.object.simple.isFalse()
    suite.object.nested.isFalse()
    suite.string.isFalse()
    suite.tuple.isFalse()
    suite.undefined.isFalse()
  })
  describe('Type check (boolean)', () => {
    const schema = literal(true)
    const suite = createSuite((v) => schema.is(v))
    suite.array.string.isFalse()
    suite.boolean.each((c) => (c.value ? c.isTrue() : c.isFalse()))
    suite.date.isFalse()
    suite.literal.boolean.isTrue()
    suite.literal.number.isFalse()
    suite.literal.string.isFalse()
    suite.null.isFalse()
    suite.number.isFalse()
    suite.object.simple.isFalse()
    suite.object.nested.isFalse()
    suite.string.isFalse()
    suite.tuple.isFalse()
    suite.undefined.isFalse()
  })
})
